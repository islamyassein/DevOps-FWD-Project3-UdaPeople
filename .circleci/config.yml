version: 2.1

orbs:
  slack: circleci/slack@4.1.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
      # Add parameter here   
    steps:
      - run:
          name: Delete S3 bucket content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowID>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowID>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.workflowID>>)
            if (($SUCCESS == 1));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
    description: "install nodejs 13 from NodeSource"
    steps:
      - run:
          name: "install nodejs 13 from NodeSource"
          command: |
            sudo apt-get install -y jq tar gzip git curl
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt-get install -y nodejs

  slack_notify_on_faliure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1

jobs:

  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install Prerequisites
          command: |            
            sudo apt -y install jq tar gzip git curl

      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack_notify_on_faliure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install Prerequisites
          command: |
            sudo apt -y install jq tar gzip git curl

      - run:
          name: Back-End build
          command: |
            cd backend
            npm install
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack_notify_on_faliure

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: frontend unit test
          command: |
            cd frontend
            npm install
            npm test

      - slack_notify_on_faliure
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend unit test
          command: |
            cd backend
            npm install
            npm test

      - slack_notify_on_faliure
          
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install Prerequisites
          command: |
            sudo apt -y install jq tar gzip git curl
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name:  Scan-Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

      - slack_notify_on_faliure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      
      - slack_notify_on_faliure

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # Here's where you will add some code to rollback on failure
      # - slack_notify_on_faliure  
      # - destroy-environment  

  configure-infrastructure:
    docker: 
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # Install dependencies
      - install_awscli
      - install_ansible
      - run:
          name: Install dependencies
          command : |
            sudo apt -y update
            sudo apt -y install jq tar gzip git curl
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "ff:2a:36:47:88:df:cc:df:f2:16:5c:81:f8:b0:83:f6"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure ec2 backend server using ansible
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook configure-server.yml -i inventory.txt

      # Here's where you will add some code to rollback on failure
      # - slack_notify_on_faliure
      # - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    environment:
        # TYPEORM_CONNECTION: $TYPEORM_CONNECTION                    # postgres
        TYPEORM_ENTITIES: ./src/modules/domain/**/*.entity{.ts,.js}  # $TYPEORM_ENTITIES
        # TYPEORM_HOST: $TYPEORM_HOST                                # udapeople-prod.cjckrotun9g5.us-east-1.rds.amazonaws.com
        # TYPEORM_PORT: $TYPEORM_PORT                                # 5432
        # TYPEORM_USERNAME: $TYPEORM_USERNAME                        # postgres
        # TYPEORM_PASSWORD: $TYPEORM_PASSWORD                        # udapeopledbpassw0rd
        # TYPEORM_DATABASE: $TYPEORM_DATABASE                        # postgres
        TYPEORM_MIGRATIONS: ./src/migrations/*.ts                    # $TYPEORM_MIGRATIONS
        TYPEORM_MIGRATIONS_DIR: ./src/migrations                     # $TYPEORM_MIGRATIONS_DIR
    
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            # export TYPEORM_ENTITIES=./src/modules/domain/**/*.entity{.ts,.js}
            # export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            # export TYPEORM_MIGRATIONS_DIR=./src/migrations

            cd backend
            npm install
            npm run migrations > migration.txt

      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migration.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
     # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment    

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects using ansible
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # - slack_notify_on_faliure  
      # - revert-migrations 
      # - destroy-environment

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - install_ansible
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "ff:2a:36:47:88:df:cc:df:f2:16:5c:81:f8:b0:83:f6"
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: avoid hosts unknown ssh error
          command: |
            echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      # - run:
      #     name: Configure .Env File
      #     command: |
      #       echo NODE_ENV=production >> backend/.env
      #       echo VERSION=1 >> backend/.env
      #       echo TYPEORM_CONNECTION=postgres >> backend/.env
      #       echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity{.ts,.js} >> backend/.env
      #       echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
      #       echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
      #       echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
      #       echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
      #       echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      #       echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
      #       echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
      #       cat backend/.env

      - run:
          name: install npm backend dependencies, and package backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files
            cd .circleci/ansible

            # Old script to package backend
            # cd backend
            # npm run build
            # tar -czf artifact.tar.gz dist/* package*
            # cd ..
            # cp backend/artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files

      - run:
          name: deploy backend using ansible
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # - slack_notify_on_faliure
      # - revert-migrations
      # - destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies "curl"
          command: |
            sudo apt-get install -y jq tar gzip git curl
      - run:
          name: Get backend url and Backend smoke test
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo "BACKEND_PUBLIC_IP: $BACKEND_PUBLIC_IP"
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            S3_Web_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
            echo "S3_Web_URL: $S3_Web_URL"
            if curl -s $S3_Web_URL | grep "Welcome"
            then 
              exit 0
            else
              exit 1
            fi

      # Here's where you will add some code to rollback on failure
      # - slack_notify_on_faliure  
      # - revert-migrations 
      # - destroy-environment

  cloudfront-update:
    docker: 
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Get old stack workflow id
          command: |
              export Old_Workflow_ID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text | tr -d '\n')

              echo "Old_Workflow_ID: ${Old_Workflow_ID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

              echo "saving Old_Workflow_ID to kvdb"
              curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${Old_Workflow_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople

      # Here's where you will add some code to rollback on failure 
      # - slack_notify_on_faliure  
      # - revert-migrations 
      # - destroy-environment

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Get old stack workflow id
          command: |
            # Ftech stacks
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}" 

            # Fetch the Old workflow ID
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo "getting Old_Workflow_ID from kvdb, Old_Workflow_ID is:${OldWorkflowIDs}"
            
            # Remove old stacks and files
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
  
  notify_on_success:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: success_tagged_deploy_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      # - notify_on_success