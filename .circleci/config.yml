version: 2.1

orbs:
  slack: circleci/slack@4.1.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
      # Add parameter here   
    steps:
      - run:
          name: Delete S3 bucket content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            exit 0
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowID>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowID>>
            exit 0

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
        default: myStack-${CIRCLE_WORKFLOW_ID:0:7}s
      # Add parameter here     
    steps:
      - restore_cache:
          keys: [backend-build]
          
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=`curl -H "token: e38aee29-a976-4696-843d-2d115c52219a" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}`
            if [[ $SUCCESS == 1 ]];
            then
              cd ~/project/backend
              npm install
              # revert migration
              npm run migrations:revert
            fi

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  slack_notify_on_faliure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1

jobs:

  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout

      - run:
          name: Install Prerequisites
          command: |            
            sudo apt -y install jq tar gzip git curl

      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack_notify_on_faliure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout

      - run:
          name: Install Prerequisites
          command: |
            sudo apt -y install jq tar gzip git curl

      - run:
          name: Back-End build
          command: |
            cd backend
            npm install
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack_notify_on_faliure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: frontend unit test
          command: |
            cd frontend
            npm install
            npm run test

      - slack_notify_on_faliure
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend unit test
          command: |
            cd backend
            npm install
            npm run test

      - slack_notify_on_faliure
          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install Prerequisites
          command: |
            sudo apt -y install jq tar gzip git curl
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name:  Scan-Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

      - slack_notify_on_faliure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      
      - slack_notify_on_faliure



  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=UdaPeople-BackEnd-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # Here's where you will add some code to rollback on failure
      - destroy-environment    

  configure-infrastructure:
    docker: 
      - image: cimg/base:stable
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "ff:2a:36:47:88:df:cc:df:f2:16:5c:81:f8:b0:83:f6"
      # Install dependencies
      - run: |
          sudo apt -y update
          sudo apt -y install jq tar gzip git curl
      - install_awscli
      - install_ansible
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook configure-server.yml -i inventory.txt

      # Here's where you will add some code to rollback on failure
      - destroy-environment


  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      - install_awscli

      - restore_cache:
          keys: [backend-build]

      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > /tmp/migration.log
      - run:
          name: Send migration results to memstash
          command: |
            MIGRATION_COUNT=`grep -c "has been executed successfully" /tmp/migration.log || true`
            echo "migrations count: ${MIGRATION_COUNT}"
            if [[ $MIGRATION_COUNT -gt 0 ]];
            then
              # put it in the shared memory
              curl -H "Content-Type: text/plain" \
               -H "token: e38aee29-a976-4696-843d-2d115c52219a" \
               --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
     # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment    

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum -y install nodejs npm tar gzip jq git
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`curl -H "token: e38aee29-a976-4696-843d-2d115c52219a" --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7}`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Build frontend
          command: |            
            cd frontend
            npm i
            BACKEND_IP=`curl -H "token: e38aee29-a976-4696-843d-2d115c52219a" --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7}`
            export API_URL="http://${BACKEND_IP}:3030"
            export NODE_ENV=production
            #npm install webpack
            #npm install webpack-cli
            npm run build:prod
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            #cp -r node_modules ./dist/
            cp .env ./dist/
            # deploy to s3 bucket
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Create S3 bucket url
          command: |
            LOCATION=`aws s3api get-bucket-location --bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7} --output text | tr -d '\n'`
            S3_URL="udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-${LOCATION}.amazonaws.com/index.html"
            echo $S3_URL
            curl -H "Content-Type: text/plain" -H "token: e38aee29-a976-4696-843d-2d115c52219a" \
            --request PUT --data "$S3_URL" \
            https://api.memstash.io/values/S3_URL_${CIRCLE_WORKFLOW_ID:0:7}
      
      # Here's where you will add some code to rollback on failure    
      - revert-migrations
      - destroy-environment
          
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
       - image: python:3.7-alpine3.11
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - "ff:2a:36:47:88:df:cc:df:f2:16:5c:81:f8:b0:83:f6"

      - run:
          name: Install dependencies
          command: |
            apt -y update
            apt -y install jq tar gzip git curl
            curl -sL https://deb.nodesource.com/setup_12.x | bash -
            apt -y install nodejs

      - attach_workspace:
          at: ~/

      - run:
          name: Avoid hosts unknown
          command: |
            echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            #export NODE_ENV=production
            npm run build
            cp package* ./dist
            cd dist
            tar -czvf ../backend.tar.gz ./*
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook deploy-backend.yml --inventory-file=inventory.txt
      - slack-notification-fail
      - destroy-environment
      # - revert-migrations

      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies "curl"
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker: 
  #     - image: amazon/aws-cli
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #     # Docker image here
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           export OldWorkflowID="the id here"
  #           export STACKS=[] #put the list of stacks here
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             # your code here
  #           fi
  
  notify_on_success:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: success_tagged_deploy_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - notify_on_success
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
